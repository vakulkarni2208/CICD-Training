<apex:page controller="NV_ListContactExtension" sidebar="false" docType="html-5.0">
    <apex:form html-novalidate="novalidate">
        <apex:pageBlock title="Company Contacts  ({!contactCount})">
            <apex:pageBlockButtons >
                <apex:commandButton value="New" action="{!AddContact}" style="align:center;" />
            </apex:PageBlockButtons>
            <apex:pageMessages rendered="{!NOT(displayPopUp)}"></apex:pageMessages>
            <div style="overflow: scroll; height: 220px;">
                <apex:pageBlockTable value="{!contacts}" var="con" width="100%">
                    <apex:column headerValue="Edit" title="Update the contact information">
                        <apex:commandLink value="Edit" action="{!checkContactStatus}">
                            <apex:param name="actionToPerform" value="Edit" assignTo="{!actionToPerform}" />
                            <apex:param name="contactId" value="{!con.Id}" assignTo="{!contactId}" />
                        </apex:commandLink>
                    </apex:column>
                    <apex:column headerValue="Delete" title="Delete removes the contact entirely (left company)">
                        <apex:commandLink value="Delete" action="{!checkContactStatus}">
                            <apex:param name="actionToPerform" value="Delete" assignTo="{!actionToPerform}" />
                            <apex:param name="contactId" value="{!con.Id}" assignTo="{!contactId}" />
                        </apex:commandLink>
                    </apex:column>
                    <apex:column headerValue="Deactivate" title="Deactivate removes portal access but leaves the contact on the account">
                        <apex:commandLink value="Deactivate" action="{!checkContactStatus}" rendered="{!con.Community_User_Active__c}">
                            <apex:param name="actionToPerform" value="Deactivate" />
                            <apex:param name="contactId" value="{!con.Id}" />
                        </apex:commandLink>
                    </apex:column>
                    <apex:column headerValue="Name">
                        <apex:outputLink value="/apex/NV_AddEditContact?id={!con.Id}&readonly=true">{!con.name}</apex:outputLink>
                    </apex:column>
                    <apex:column headerValue="Email">
                        <apex:outputField value="{!con.Email}" /></apex:column>
                    <apex:column headerValue="Title">
                        <apex:outputField value="{!con.Title}" /></apex:column>
                    <apex:column headerValue="Phone">
                        <apex:outputField value="{!con.Phone}" /></apex:column>
                    <apex:column headerValue="Role">
                        <apex:outputField value="{!con.Role__c}" /></apex:column>
                </apex:pageBlockTable>
            </div>
        </apex:pageBlock>
        <apex:outputPanel id="tstpopup">
            <apex:outputPanel styleClass="popupBackground" layout="block" rendered="{!displayPopUp}" />
            <apex:outputPanel styleClass="custPopup" layout="block" rendered="{!displayPopUp}">
                <apex:pageBlock >
                    <apex:pageMessages ></apex:pageMessages>
                    <apex:pageBlockSection >
                        Please provide the reason to delete / deactivate the contact.
                        <br/>
                        <br/>
                        <br/>
                        <apex:inputText value="{!resonForRemoval}" id="resonForRemoval" />
                        <apex:commandButton value="Close" action="{!closePopup}" immediate="true" />
                        <apex:commandButton value="Submit" action="{!removeContact}" />
                    </apex:pageBlockSection>
                </apex:pageBlock>
            </apex:outputPanel>
        </apex:outputPanel>

        <div class="uploadBox">
            <div style="float:left;padding-top:5px;">
                <b>Bulk Upload</b>(Use to add multiple contacts) </div>
            <br> </br>
            <div style="float:left;padding-top:5px;">
                <apex:outputLink value="{!$Resource.NPN_Bulk_Upload}">Download Template</apex:outputLink>
            </div>
            <br> </br>
            <div style="float:left;padding-top:5px;">Upload File:</div>
            <div style="float:left;">
                <input type="file" accept=".csv, .xlsx, .xls" multiple="false" id="filesInput" name="file" />
            </div>
            <div style="text-align:left" class="buttonTD">
                <!--  <input id="uploadButton" type="button" title="Upload" class="btn" value="{!$Label.CRM_SURF_SubmitPOS_SUBMIT}"/> -->
                <input id="uploadButton" type="button" title="Upload" class="btnSubmit" value="{!$Label.CRM_SURF_SubmitPOS_SUBMIT}" />
                <br />
                <br />
                <input id="clear" style="display:none;" type="button" title="Clear" class="btn" value=" Clear " />
            </div>
        </div>
        <apex:pageBlock title="Request Status">
            <div style="overflow: scroll; height: 220px;">
                <apex:pageBlockTable value="{!TemporaryContacts}" var="tempCon" width="100%">
                    <apex:column headerValue="Name">
                        <apex:outputText value="{!tempCon.name}" /></apex:column>
                    <apex:column headerValue="Email">
                        <apex:outputText value="{!tempCon.emailAddr}" /></apex:column>
                    <apex:column headerValue="Title">
                        <apex:outputText value="{!tempCon.title}" /></apex:column>
                    <apex:column headerValue="Role">
                        <apex:outputText value="{!tempCon.role}" /></apex:column>
                    <apex:column headerValue="Action Requested">
                        <apex:outputText value="{!tempCon.actionRequested}" /></apex:column>
                    <apex:column headerValue="Reason for Deactivation or Deletion">
                        <apex:outputText value="{!tempCon.reasonForDeletion}" />
                    </apex:column>
                    <apex:column headerValue="Status">
                        <apex:outputText value="{!tempCon.status}" /></apex:column>
                    <apex:column headerValue="Comments from Partner Team">
                        <apex:outputText value="{!tempCon.comment}" />
                    </apex:column>
                    <apex:column headerValue="Request Submit Date">
                        <apex:outputText value="{!tempCon.LastModifiedDate}" /></apex:column>
                    <!--<apex:column headerValue="Request Submit Date">
                        <apex:outputText value="{0,date,dd' 'MMMMM' 'yyyy ' at ' HH:mm a}">
                            <apex:param value="{!tempCon.LastModifiedDate}" /> 
                        </apex:outputText>
                    </apex:column>-->

                </apex:pageBlockTable>
            </div>
        </apex:pageBlock>
        <apex:pageBlock title="Bulk Contact Request Status"> <!--rendered="{!BulkContactRequests.size != 0}"-->
            <div style="overflow: scroll; height: 220px;">
                <apex:pageBlockTable value="{!BulkContactRequests}" var="bcrObj" width="100%">
                    <apex:column headerValue="Requestor Name">
                        <apex:outputText value="{!bcrObj.requestedBy}" /></apex:column>
                    <apex:column headerValue="Status">
                        <apex:outputText value="{!bcrObj.Status}" /></apex:column>
                    <apex:column headerValue="Request Submit Date">
                        <apex:outputText value="{!bcrObj.CreatedDate}" /></apex:column>
                </apex:pageBlockTable>
            </div>
        </apex:pageBlock>
        <apex:pageBlock >
            <div style="float:left;padding-top:5px;">
                <b>
                    <I>Do you need help? Please contact us on
                        <apex:outputLink value="mailto:nvidiapartnerportal@nvidia.com">
                            nvidiapartnerportal@nvidia.com </apex:outputLink>
                    </I>
                </b>
            </div>
            <br> </br>
        </apex:pageBlock>
    </apex:form>
    <style>
        td.attfile {
            width: 33%;
        }

        td.submissionCls {
            width: 30%;
        }

        .tdthStyle {
            padding: 15px;
            border: 1px solid black;
        }

        .btn {
            width: 100px;
        }

        .btnSubmit {
            width: 100px;
            background-color: rgb(118, 185, 0);
            color: White;
            font-weight: bold;
        }

        .pageBlockHeader {
            font-size: 21px;
            font-weight: bold;
            text-transform: uppercase;
            font-family: 'Trebuchet MS';
            text-align: left;
        }

        .secTitle {
            font-size: 21px;
            font-weight: bold;
            text-transform: uppercase;
            line-height: 2.5;
            font-family: 'Trebuchet MS';
            color: rgb(59, 93, 0);
        }

        .sectionTitle {
            font-size: 19px;
            font-weight: bold;
            text-transform: uppercase;
            line-height: 2.5;
            font-family: 'Trebuchet MS';
        }

        .title {
            text-align: left;
            font-size: 17px;
            line-height: 1.25;
            font-weight: bold;
            font-family: 'Trebuchet MS';
        }

        .subtitle {
            text-align: left;
            font-size: 13px;
            line-height: 1.25;
            font-family: 'Trebuchet MS';
            height: 12.25px;
        }

        .errorText {
            font-family: Trebuchet MS;
            text-align: center;
            font-size: 16px;
            display: none;
        }

        .buttonTD {
            padding-left: 6px;
        }

        .clear {
            clear: both;
        }

        .fileName {
            float: left;
            max-width: 235px;
            overflow: hidden;
            position: absolute;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .percentComplete {
            float: right;
        }

        .statusBar {
            background: none repeat scroll 0 0 #FFFFFF;
            border: 1px solid #EAEAEA;
            height: 11px;
            padding: 0 2px 0 0;
        }

        .statusBarPercent {
            background-color: #1797C0;
            float: left;
            height: 9px;
            margin: 1px;
            max-width: 100%;
        }

        .statusBarPercentError {
            background-color: #CE0000;
        }

        .upload {
            background-color: white;
            border: 1px solid #CACACA;
            border-radius: 3px 3px 3px 3px;
            margin-top: 6px;
            padding: 4px;
        }

        .uploadBox {
            background-color: #F8F8F8;
            border: 1px solid #EAEAEA;
            border-radius: 4px 4px 4px 4px;
            color: #333333;
            font-size: 12px;
            padding: 6px;
            width: 100%;
        }

        .uploadError {
            border-color: #CE0000;
        }

        .uploadTable {
            margin-left: 0px;
            margin-right: auto;
        }

        .left {
            float: left;
        }

        textarea {
            display: block; //margin-left: auto;
            //margin-right: auto;
            resize: none;
        }

        /* Tooltip container */

        .tooltip {
            position: relative;
            display: inline-block;
        }

        /* Tooltip text */

        .tooltip .tooltiptext {
            visibility: hidden;
            width: 330px;
            background-color: black;
            color: #fff;
            text-align: center;
            padding: 5px 0;
            border-radius: 6px;

            /* Position the tooltip text - see examples below! */
            position: absolute;
            z-index: 1;
        }

        /* Show the tooltip text when you mouse over the tooltip container */

        .tooltip:hover .tooltiptext {
            visibility: visible;
        }

        .custPopup {
            background-color: white;
            border-width: 2px;
            border-style: solid;
            z-index: 9999;
            left: 50%;
            padding: 10px;
            position: absolute;
            /* These are the 3 css properties you will need to change so the popup 
            displays in the center of the screen. First set the width. Then set 
            margin-left to negative half of what the width is. You can add 
            the height property for a fixed size pop up if you want.*/
            width: 500px;
            margin-left: -250px;
            top: 100px;
        }

        .popupBackground {
            background-color: black;
            opacity: 0.20;
            filter: alpha(opacity=20);
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: 9998;
        }
    </style>
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" />
    <!--<script type="text/javascript" src="{!$Resource.FileUploadJS}"/>-->

    <script type="text/javascript">
        var parentId = '{!acctId}'; //Will be used by FileUploadJS.js but must be declared here. Static resources don't support dynamic values.
    </script>
    <script>
        var j$ = jQuery.noConflict();
        j$(document).ready(function () {
            j$("#uploadButton").click(function () {
                prepareFileUploads();
            });
        });
        var maxFileSize = 1000000;
        var byteChunkArray;
        var files;
        var currentFile;
        var $upload;
        var CHUNK_SIZE = 180000; //Must be evenly divisible by 3, if not, data corruption will occur
        var VIEW_URL = '/servlet/servlet.FileDownload?file=';

        function prepareFileUploads() {
            files = document.getElementById('filesInput').files;
            //Only proceed if there are files selected
            if (files.length == 0) {
                alert('Please select a file!');
                return; //end function
            }
            //Disable inputs and buttons during the upload process
            j$(".uploadBox input").attr("disabled", "disabled");
            j$(".uploadBox button").attr({
                disabled: "disabled",
                class: "btnDisabled"
            });

            //Build out the upload divs for each file selected
            var uploadMarkup = '';
            for (i = 0; i < files.length; i++) {
                //Determine file display size
                if (files[i].size < 1000000) {
                    var displaySize = Math.floor(files[i].size / 1000) + 'K';
                } else {
                    var displaySize = Math.round((files[i].size / 1000000) * 10) / 10 + 'MB';
                }

                //For each file being uploaded create a div to represent that file, includes file size, status bar, etc. data-Status tracks status of upload
                uploadMarkup += '<div class="upload" data-status="pending" data-index="' + i + '">'; //index used to correspond these upload boxes to records in the files array
                uploadMarkup += '<div class="fileName"><span class="name">' + files[i].name + '</span> - ' + displaySize + '</div>';
                uploadMarkup += '<div class="percentComplete">0%</div>'
                uploadMarkup += '<div class="clear"/>';
                uploadMarkup += '<div class="statusBar">';
                uploadMarkup += '<div class="statusBarPercent"/>';
                uploadMarkup += '</div>';
                uploadMarkup += '</div>';
            }

            //Add markup to the upload box
            j$('.uploadBox').append(uploadMarkup);

            //Once elements have been added to the page representing the uploads, start the actual upload process
            checkForUploads();
        }

        function checkForUploads() {
            //Get div of the first matching upload element that is 'pending', if none, all uploads are complete
            $upload = j$(".upload:first[data-status='pending']");

            if ($upload.length != 0) {
                //Based on index of the div, get correct file from files array
                currentFile = files[$upload.attr('data-index')];

                /*Build the byteChunkArray array for the current file we are processing. This array is formatted as:
                ['0-179999','180000-359999',etc] and represents the chunks of bytes that will be uploaded individually.*/
                byteChunkArray = new Array();

                //First check to see if file size is less than the chunk size, if so first and only chunk is entire size of file
                if (currentFile.size <= CHUNK_SIZE) {
                    byteChunkArray[0] = '0-' + (currentFile.size - 1);
                } else {
                    //Determine how many whole byte chunks make up the file,
                    var numOfFullChunks = Math.floor(currentFile.size / CHUNK_SIZE); //i.e. 1.2MB file would be 1000000 / CHUNK_SIZE
                    var remainderBytes = currentFile.size % CHUNK_SIZE; // would determine remainder of 1200000 bytes that is not a full chunk
                    var startByte = 0;
                    var endByte = CHUNK_SIZE - 1;

                    //Loop through the number of full chunks and build the byteChunkArray array
                    for (i = 0; i < numOfFullChunks; i++) {
                        byteChunkArray[i] = startByte + '-' + endByte;

                        //Set new start and stop bytes for next iteration of loop
                        startByte = endByte + 1;
                        endByte += CHUNK_SIZE;
                    }

                    //Add the last chunk of remaining bytes to the byteChunkArray
                    startByte = currentFile.size - remainderBytes;
                    endByte = currentFile.size;
                    byteChunkArray.push(startByte + '-' + endByte);
                }

                //Start processing the byteChunkArray for the current file, parameter is '' because this is the first chunk being uploaded and there is no attachment Id
                processByteChunkArray('');

            } else {
                //All uploads completed, enable the input and buttons
                j$(".uploadBox input").removeAttr("disabled");
                j$(".uploadBox button").removeAttr("disabled").attr("class", "btn");

                /*Remove the browse input element and replace it, this essentially removes
                the selected files and helps prevent duplicate uploads*/
                j$("#filesInput").replaceWith('<input type="file" name="file" multiple="true" id="filesInput">');
            }
        }

        //Uploads a chunk of bytes, if attachmentId is passed in it will attach the bytes to an existing attachment record
        function processByteChunkArray(attachmentId) {
            //Proceed if there are still values in the byteChunkArray, if none, all piece of the file have been uploaded
            if (byteChunkArray.length > 0) {
                //Determine the byte range that needs to uploaded, if byteChunkArray is like... ['0-179999','180000-359999']
                var indexes = byteChunkArray[0].split('-'); //... get the first index range '0-179999' -> ['0','179999']
                var startByte = parseInt(indexes[0]); //0
                var stopByte = parseInt(indexes[1]); //179999
                var blobChunk;
                //Slice the part of the file we want to upload, currentFile variable is set in checkForUploads() method that is called before this method
                if (currentFile.webkitSlice) {
                    blobChunk = currentFile.webkitSlice(startByte, stopByte + 1);
                } else if (currentFile.mozSlice) {
                    blobChunk = currentFile.mozSlice(startByte, stopByte + 1);
                } else {
                    blobChunk = currentFile.slice(startByte, stopByte + 1);
                }
                //Create a new reader object, part of HTML5 File API
                var reader = new FileReader();

                //Read the blobChunk as a binary string, reader.onloadend function below is automatically called after this line
                //reader.readAsBinaryString(blobChunk);
                reader.readAsArrayBuffer(blobChunk);

                //Create a reader.onload function, this will execute immediately after reader.readAsBinaryString() function above;
                reader.onloadend = function (evt) {
                    if (evt.target.readyState == FileReader.DONE) { //Make sure read was successful, DONE == 2
                        //Base 64 encode the data for transmission to the server with JS remoting, window.btoa currently on support by some browsers
                        //var base64value = window.btoa(evt.target.result);

                        var binary = "";
                        var bytes = new Uint8Array(evt.target.result);
                        var length = bytes.byteLength;

                        for (var i = 0; i < length; i++) {
                            binary += String.fromCharCode(bytes[i]);
                        }
                        var base64value = window.btoa(binary);

                        //Use js remoting to send the base64 encoded chunk for uploading
                        NV_ListContactExtension.attachBlob(parentId, attachmentId, currentFile.name, currentFile.type, base64value, function (result, event) {

                            //Proceed if there were no errors with the remoting call
                            if (event.status == true) {
                                //Update the percent of the status bar and percent, first determine percent complete
                                var percentComplete = Math.round((stopByte / currentFile.size) * 100);
                                $upload.find(".percentComplete").text(percentComplete + '%');
                                $upload.find(".statusBarPercent").css('width', percentComplete + '%');

                                //Remove the index information from the byteChunkArray array for the piece just uploaded.
                                byteChunkArray.shift(); //removes 0 index

                                //Set the attachmentId of the file we are now processing
                                attachmentId = result;

                                //Call process byteChunkArray to upload the next piece of the file
                                processByteChunkArray(attachmentId);

                            } else {
                                //If script is here something broke on the JavasSript remoting call
                                //Add classes to reflect error
                                $upload.attr('data-status', 'complete');
                                $upload.addClass('uploadError');
                                $upload.find(".statusPercent").addClass('statusPercentError');
                                $upload.attr('title', event.message);

                                //Check and continue the next file to upload
                                checkForUploads();
                            }
                        });
                    } else {
                        //Error handling for bad read
                        alert('Could not read file');
                    }
                };

            } else {
                //This file has completed, all byte chunks have been uploaded, set status on the div to complete
                $upload.attr('data-status', 'complete');

                //Change name of file to link of uploaded attachment
                $upload.find(".name").html('<a href="' + VIEW_URL + attachmentId + '" target="_blank">' + currentFile.name + '</a>');

                NV_ListContactExtension.sendEmail(attachmentId, function (result, event) {
                    if (event.status == true) {
                        alert("Your Contacts file has been submitted for processing");
                        window.location = window.location;
                    }
                });

                //Call the checkForUploads to find the next upload div that has data-status="incomplete" and start the upload process. 
                checkForUploads();
            }
        }

    </script>
</apex:page>